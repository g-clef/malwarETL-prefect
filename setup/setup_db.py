import os
import psycopg2
import psycopg2.extensions
from psycopg2 import sql
import requests


def setup_db():
    admin_username = os.environ.get("DB_ADMIN", "postgres")
    admin_password = os.environ.get("DB_PASSWORD")
    db_host = os.environ.get("DB_HOST")
    prefect_user = os.environ.get("PREFECT_USER", "prefect")
    prefect_password = os.environ.get("PREFECT_PASSWORD")
    prefect_db_name = os.environ.get("PREFECT_DB", "prefect")

    conn = psycopg2.connect(database="postgres", user=admin_username, password=admin_password, host=db_host)
    conn.set_isolation_level(psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT)
    with conn.cursor() as cursor:

        sql_db_name = sql.Identifier(prefect_db_name)
        drop_sql = sql.SQL("DROP DATABASE {db_name}").format(db_name=sql_db_name)
        try:
            cursor.execute(drop_sql)
        except psycopg2.Error as e:
            # it's okay if this fails if the db doesn't exist

            print(e)

        sql_user = sql.Identifier(prefect_user)
        drop_user_sql = sql.SQL("DROP USER IF EXISTS {user}").format(user=sql_user)
        try:
            cursor.execute(drop_user_sql)
        except psycopg2.Error as e:
            # it's also okay if this fails if the user doesn't exist
            print(e)

        create_user_query = sql.SQL("CREATE USER  {user} WITH encrypted password %s").format(user=sql_user)
        cursor.execute(create_user_query, (prefect_password,))

        superuser_query = sql.SQL("ALTER USER {user} with SUPERUSER").format(user=sql_user)
        cursor.execute(superuser_query)

        db_sql = sql.SQL("CREATE DATABASE {db_name}").format(db_name=sql_db_name)
        cursor.execute(db_sql)

        ownership_sql = sql.SQL("GRANT ALL PRIVILEGES ON DATABASE {db_name} TO {username}").format(db_name=sql_db_name, username=sql_user)
        cursor.execute(ownership_sql)

    conn.close()


def setup_es():
    username = os.environ.get("PREFECT_ES_USER", "prefect")
    password = os.environ.get("PREFECT_ES_PASS", None)
    elastic_user = os.environ.get("ELASTIC_USER", "elastic")
    elastic_pass = os.environ.get("ELASTIC_PASS", None)
    post_data = {"password": password,
                 "roles": "superuser"
                 }
    response = requests.post(f"https://malwaretl-cluster-es-http.es:9200/_security/user/{username}",
                             json=post_data,
                             auth=(elastic_user, elastic_pass),
                             verify=False)
    if response.status_code not in (200, 201):
        raise Exception(f"problem with user creation: {response.json()}")


def main():
    setup_db()
    setup_es()


if __name__ == "__main__":
    main()
