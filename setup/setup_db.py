import os
from psycopg2 import connect, sql
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

#########
#
# one-off job to create the prefect database and user in the
# postgres database. Warning: this needs to read from both the prefect secrets
# for the prefect username/password and the postgres secrets for the postgres username/password
# If those are in different namespaces, that will be a problem. You may need to manually copy the
# secret from one namespace into the other, whichever one you're running this script in. Yes,
# that is a *nasty* hack. I'm sorry.
#
#
#########


def setup_postgres():
    admin_username = os.environ.get("POSTGRES_ADMIN_USER", "postgres")
    admin_password = os.environ.get("POSTGRES_ADMIN_PASSWORD", None)
    server = os.environ.get("POSTGRES_SERVER", None)
    db_name = os.environ.get("DB_NAME", None)
    prefect_username = os.environ.get("POSTGRES_PREFECT_USER", "prefect")
    prefect_password = os.environ.get("POSTGRES_PREFECT_PASSWORD", None)

    # log in with postgres admin credentials
    conn = connect(f"host={server} user={admin_username} password={admin_password}")
    conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
    cur = conn.cursor()
    # first, create the prefect user
    query = sql.SQL("CREATE USER {username} WITH PASSWORD {password}").format(
        username=sql.Identifier(prefect_username),
        password=sql.Placeholder()
    )
    cur.execute(query, (prefect_password,) )

    # next, create the prefect db
    query = sql.SQL("CREATE DATABASE {db_name}").format(db_name=sql.Identifier(db_name))
    cur.execute(query)

    # Make prefect user the owner of the prefect db.
    query = sql.SQL("ALTER DATABASE {db_name} OWNER TO {username}").format(
        db_name=sql.Identifier(db_name),
        username=sql.Identifier(prefect_username)
    )
    cur.execute(query)


if __name__ == "__main__":
    setup_postgres()
